[tool.poetry]
name = "saic_python_api_proxy"
homepage = "https://github.com/SAIC-iSmart-API/saic-python-api-proxy"
version = "0.2.3"
description = "MG iSMART API proxy"
authors = [
    "Giovanni Condello <saic-python-client@nanomad.net>",
]
readme = "README.md"
package-mode = false
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/SAIC-iSmart-API/saic-python-api-proxy/issues"


[tool.poetry.dependencies]
python = "^3.11"
httpx = "^0.27.0"
flask = { version = "^3.0.3", extras = ["async"] }
saic_ismart_client_ng = { git = "https://github.com/SAIC-iSmart-API/saic-python-client-ng" }

[tool.poetry.dev-dependencies]
pytest = "^8.2.2"
mock = "^5.1.0"
coverage = "^7.5.4"
ruff = "^0.4.10"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.7"
pytest-mock = "^3.14.0"



[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = ".git build dist"
testpaths = "tests"
#pythonpath = [
#    "src"
#]
mock_use_standalone_module = true
addopts = [
    "--import-mode=importlib",
]

[tool.coverage.run]
omit = [
    "tests/*",
]
branch = true
command_line = "-m pytest"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',
    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]
ignore_errors = true

[tool.ruff]
output-format = "github"